<!--
    This begins an html comment ... "<!-- "
    Index page for Customer - No Login required.
    This a Razor Page ... it combines standard HTML (HTML 5.0) with C# code ...
    each C# block of code begins with an "at" sign ... multiple lines of C# code are enclosed in a block {}
    The corresponding close is here.
    -->
<!-- The using directives are exactly the same as in the C# code ... just like we have done in every C# file we wrote.
    -->
@using NWTradersWeb.Models;
@using PagedList.Mvc;
@using PagedList;


<!--
    Every MVC page has a model supplied by the controller.
    It is the data provided to the controller to the page ...
    it is the data supplied by the return View(model) statement in the function with the same name as the page.

    The model for this page is specified below as a (Paged) List of Customer Objects.
    A paged list is a list that can be displayed as individual pages with a page number and a size.
    It is literally a list that can be broken into customizable size pages and allows you to navigate pages.

-->
@model IPagedList<Customer>

@{

    // A viewbag is used to carry information (other than the model) from the controller function to a page.
    // You essentially put informaiton into the view bag in the controller and it is available to collect or use in the page.
    ViewBag.Title = "Customers of NW Traders ";

    // Page Sizing - The paged list gives you a property that counts the TOTAL number of items in the list.
    int NumberOfCustomers = Model.TotalItemCount;

    List<string> itemsPerPage = NWTradersUtilities.itemsPerPage;

    // Here we use the viewbag to remember the values of our paging variables.
    // The values were written to in the index function in the controller and are read from here to get the first and last pages.

    // First is the first customer to be displayed ..
    // for example customer # 16 in you are on the second page of a 15 customers per page list.
    int? First = (ViewBag.pageNumber - 1) * ViewBag.pageSize + 1;

    // Last is the last customer to display ...
    // continuing the example ... customer # 30 on the second page of a 15 customers/per page list
    int? Last = ViewBag.pageNumber * ViewBag.pageSize;

    //if Last == 30 and there are only 23 customers, then Last must become 23.
    Last = (Last > NumberOfCustomers) ? NumberOfCustomers : Last;

    // Get the list of countries from utilities
    List<string> countries = NWTradersUtilities.AllCountries().ToList();
    countries.Insert(0, ""); // Add an empty string to represent All - you could also use the word all here.

    // Get the list of contact titles from utilities
    List<string> titles = NWTradersUtilities.AllTitles().ToList();
    titles.Insert(0, ""); // Add an empty string to represent All - you could also use the word all here.

    // Get the list of contact names from utilities
    List<string> names = NWTradersUtilities.AllTitles().ToList();
    names.Insert(0, ""); // Add an empty string to represent All - you could also use the word all here.

    // Get the list of cities from utilities
    List<string> city = NWTradersUtilities.AllCities().ToList();
    city.Insert(0, ""); // Add an empty string to represent All - you could also use the word all here.

    // Get the list of regions from utilities
    List<string> region = NWTradersUtilities.AllRegion().ToList();
    region.Insert(0, ""); // Add an empty string to represent All - you could also use the word all here.



    // The "aCustomer" is just a "dummy" Customer Object,
    // We create it so we can use the "DisplayNameFor" helper to display our titles etc. 
    //
    // We may abandon this practice as we progress, since we will need greater customization.
    // As with many default options, you get standardization but lose some level of customizability.
    //
    // It is useful to know since you can use properties from the class
    // Also, this is the default manner that Scaffolding (Automatic Generation of pages) works.
    // Another benefit is that it chooses the type of display based on the data type
    // so you dont have to worry about what type of input or output container to display your values in.

    Customer aCustomer = Model.FirstOrDefault();

}

<div class="h2">@ViewBag.Title</div>

<!--
    Begin Search  Form
    A form is an HTML client-side mechanism
    to send information to the Controller on the web server in the form of a Request
    and get information back from the Controller as a "Response".
    The calling page (the page that sends the request) sends the request with two
    get the response back
    in the form of two objects, in the MVC model:
        i.      A Model that provides the main data for the page.
        ii.     A ViewBag that contains a collection of objects which the controller adds,
                and "carries" them to the calling page as part of the response.

    More on the viewbag, the Viewbag is a collection of object that carries information from the page to the controller
    and then brings information from the controller to the page.
   -->

@using (Html.BeginForm())
{// The form begins and ends on the with the curly braces.
 <div> &nbsp;</div>
    @Html.AntiForgeryToken()

    <div class="h6">Customers Search </div>
    <!-- Search routines ...

            Test and show results of this for Assignment #0
            add more fields here for Assignment #1

    -->
<div class="navbar py-2 small shadow rounded-lg" style="background-color:white">

    <!-- Search by Product..-->

    <div class="input-group-sm  ">
        Customer Company Name
        @Html.TextBox("SearchCompanyName", // Name of the variable that is passed to the controller - typically the same as "name" below.
                @ViewBag.searchCompanyName as string, // the variable that is displayed.
         new
         { // these are HTML properties used to manage the display of the text box.
             @class = "form-control",
             @type = "text",
             @name = "searchCompanyName",
             @placeholder = "Search by Company",
             onchange = "this.form.submit();",
             value = ViewBag.currentSearchCompanyName
         })
    </div>

    <div class="input-group-sm  ">
        Contact Name
        @Html.TextBox("SearchContactName", // Name of the variable that is passed to the controller - typically the same as "name" below.
                @ViewBag.SearchContactName as string, // the variable that is displayed.
         new
         { // these are HTML properties used to manage the display of the text box.
             @class = "form-control",
             @type = "text",
             @name = "SearchContactName",
             @placeholder = "Search by Contact Name",
             onchange = "this.form.submit();",
             value = ViewBag.currentSearchContactName
         })
    </div>

    <!-- Select Country..-->
    <div class="input-group-sm">
        Country
        @Html.DropDownList("searchCountryName",
                new SelectList(countries), // this is the only functional difference from the textbox - it is the list of strings displayed in the dropdown.
         new
         {
             @class = "custom-select",
             @name = "searchCountryName",
             onchange = "this.form.submit();"
         })
    </div>

    <!-- Select title..-->
    <div class="input-group-sm ">
        Contact Title
        @Html.DropDownList("searchTitle", new SelectList(titles),
         new
         {
             @class = "custom-select",
             @name = "searchTitle",
             onchange = "this.form.submit();"
         })
    </div>

    <!--Riddhi's code start-->
    <!-- Select name..-->
    <!-- Select region..-->
    <div class="input-group-sm  ">
        Region
        @Html.DropDownList("searchRegion",
                new SelectList(region), // this is the only functional difference from the textbox - it is the list of strings displayed in the dropdown.
         new
         { // these are HTML properties used to manage the display of the text box.
             @class = "custom-select",
             @name = "searchRegion",
             onchange = "this.form.submit();",
         })
    </div>

    <!-- Select city..-->
    <div class="input-group-sm  ">
        City
        @Html.DropDownList("searchCity",
                new SelectList(city), // this is the only functional difference from the textbox - it is the list of strings displayed in the dropdown.
         new
         { // these are HTML properties used to manage the display of the text box.
             @class = "custom-select",
             @name = "searchCity",
             onchange = "this.form.submit();",
         })
    </div>

    <!--Riddhi's code end-->

</div>

    }

    <div> &nbsp;</div>

    <div class="container shadow py-4">

        <table class="table-bordered table-striped" style="font-size:small; width:100%">
            <thead>
                <tr class="">
                    <th></th>
                    <th>@Html.DisplayNameFor(model => aCustomer.CompanyName) </th>
                    <th>@Html.DisplayNameFor(model => aCustomer.ContactName)</th>
                    <th>@Html.DisplayNameFor(model => aCustomer.ContactTitle)</th>
                    <th>@Html.DisplayNameFor(model => aCustomer.Address)</th>
                    <th>@Html.DisplayNameFor(model => aCustomer.City)</th>
                    <th>@Html.DisplayNameFor(model => aCustomer.Region)</th>
                    <th>@Html.DisplayNameFor(model => aCustomer.Country)</th>
                    <th>@Html.DisplayNameFor(model => aCustomer.Phone)</th>
                    <th>&nbsp;</th>

                </tr>
            </thead>
            <tbody>
                @{ int i = 0;}
                @foreach (var item in Model)
                {
                    // What is the data type - this is a question you should always ask when you read or write code.
                    // What is the data type of "i"?
                    // What is the data type of "item"?
                    // What is the data type of Model?
                    // What is the data type of each item."Field Name"?
                    i++;
                    <tr>
                        <td class="text-right px-2"> @i </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.CompanyName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ContactName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ContactTitle)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Address)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.City)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Region)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Country)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Phone)
                        </td>
                        <td>
                           @Html.ActionLink(
                           "Login", // the text to display
                           "Login", // function name on the controller to call
                           new { CompanyName = item.CompanyName },
                           new {@class = "btn btn-info shadow"}// Any value passed
                           )
                        </td>

                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="container border-dark" style="font-size:small;width:100%">
        <!-- Begin Search  Form -->
        @using (Html.BeginForm())
        {
            // You can have multiple forms on a page.
            // The AntiForgery Token is a way for the controller to make sure the
            // requesting page is the page that sent the request, and
            // it is the page that the response should be sent to.
            @Html.AntiForgeryToken()
            if (NumberOfCustomers > 0)
            {
                <nav class="navbar">
                    <div class=" " style=" ">
                        @Html.PagedListPager(Model, page => Url.Action("Index",
                              new
                              {
                                  page,
                                  sortOrder = ViewBag.sortOrder,
                              }))
                    </div>
                    <div class="" style="">
                        @First  .... @Last of @NumberOfCustomers Customers
                    </div>

                    <!-- Select Items Per Page -->
                    <div class="align-content-end " style="">
                        Customers per Page:
                        @Html.DropDownList("itemsPerPage", new SelectList(itemsPerPage),
                     new
                     {
                         @class = "custom-select-sm",
                         @style = "width:50%",
                         @type = "submit",
                         onchange = "this.form.submit();"
                     })
                    </div>
                </nav>
            }
        }
    </div>